on:
  push:
    branches:
      - branch

name: Deploy staging environment to Amazon ECS 
env:
  AWS_REGION: us-east-1
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'

      - name: Build, tag, and push frontend image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f app/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build, tag, and push backend image to Amazon ECR
        id: build-backend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          BCK_ECR_REPOSITORY: ${{ secrets.BCK_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$BCK_ECR_REPOSITORY:$IMAGE_TAG -f server/Dockerfile .
          docker push $ECR_REGISTRY/$BCK_ECR_REPOSITORY:$IMAGE_TAG
          echo "backend_image=$ECR_REGISTRY/$BCK_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Download task definition for frontend container
        run: |
          aws ecs describe-task-definition --task-definition dockerprojectfront --query taskDefinition > task-definition.json
  
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: my_docker_project_app
          image: ${{ env.image }}
  
      - name: Deploy Amazon ECS task definition for frontend
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: sample-repo
          cluster: arn:aws:ecs:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:cluster/sample-repo
                   

      - name: Download task definition for backend container
        run: |
          aws ecs describe-task-definition --task-definition dockerprojectbck --query taskDefinition > task-definition-2.json
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-back
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-2.json
          container-name: mydockerserver
          image: ${{ env.backend_image }}
      
      - name: Deploy Amazon ECS task definition for backend
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-back.outputs.task-definition }}
          service: sample-repo-back
          cluster: arn:aws:ecs:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:cluster/sample-repo
